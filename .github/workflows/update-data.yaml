# Fetch new report(s), update the data folder and push changes to the branch
# that triggered the workflow ("master" in case of scheduled executions).
# If no new reports are found, this workflow terminates with success.
# If a new report is found, relevant README badges are updated as well.
#
# FIXME: remove those ugly "if" when GitHub introduces some form of early exit
#
name: Update data
on:
  schedule:
    # syntax: <minute> <hour> <day-of-the-year> <month> <day-of-the-week>
    - cron: '0 11,14,17 * * 1-6'
    # Run three times a day (except sunday): 12, 15, 18 (Italian time)

  workflow_dispatch:
    # enable manual triggering from GitHub

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies  # Caching doesn't seem to help
        run: pip install -r src/requirements.txt

      - name: Update the data if new reports were published
        id: update-data
        # Can't invoke the script inside echo string or the step will always succeed
        # even if the script fails
        run: >
          UPDATED_FILES=$(python src/update_data.py)
          && echo "::set-output name=updated-files::$UPDATED_FILES"

      - name: Commit changes
        if: steps.update-data.outputs.updated-files != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          git commit -m "Auto-update data"

      - name: Push changes
        if: steps.update-data.outputs.updated-files != ''
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set env.LATEST to the date of most recent data
        if: steps.update-data.outputs.updated-files != ''
        run: >
          python -c
          "from src.common import get_latest_data_date;
          print(f'LATEST={get_latest_data_date()}')"
          >> $GITHUB_ENV

      - name: Update badge [Data updated to | {date}]
        if: steps.update-data.outputs.updated-files != ''
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 155f87dfa7e7a88887fa1c7da879f7f8
          filename: iccas-last-update.json
          label: Data updated to
          message: ${{ env.LATEST }}
          color: blue
